/* 
 * Auto-generated TypeScript File by UiRtc
 * Version: 1.0.
 * Generated on: 2025-02-12 21:03:35 UTC 
 * Do not modify this file manually.
 */
/* eslint-disable */
/* tslint:disable */

import {
  HubConnection,
  HubConnectionBuilder,
  HubConnectionState
} from "@microsoft/signalr";

type uiRtcHubs = 'AttributeDeclaration' | 'OnConnectionHub' | 'OnConnectionManager' | 'SimpleContextHub' | 'SimpleEmptyHub' | 'SimpleHub' | 'TwoContractsHub';
const allHubs: uiRtcHubs[] = ['AttributeDeclaration', 'OnConnectionHub', 'OnConnectionManager', 'SimpleContextHub', 'SimpleEmptyHub', 'SimpleHub', 'TwoContractsHub'];

type hubMethods = AttributeDeclarationMethod | SimpleContextHubMethod | SimpleEmptyHubMethod | SimpleHubMethod | TwoContractsHubMethod;

type AttributeDeclarationMethod = 'AttributeDeclarationAttributeHandler';
type SimpleContextHubMethod = 'SimpleContextHandler';
type SimpleEmptyHubMethod = 'SimpleEmptyHandler';
type SimpleHubMethod = 'SimpleHandler';
type TwoContractsHubMethod = 'TwoContracts';

type hubSubscriptions = AttributeDeclarationSubscription | OnConnectionHubSubscription | OnConnectionManagerSubscription | SimpleContextHubSubscription | SimpleEmptyHubSubscription | SimpleHubSubscription | TwoContractsHubSubscription;

type AttributeDeclarationSubscription = 'AttributeDeclarationAttributeAnswer';
type OnConnectionHubSubscription = 'DummyMethod';
type OnConnectionManagerSubscription = 'UpdateStatus';
type SimpleContextHubSubscription = 'SimpleContextAnswer';
type SimpleEmptyHubSubscription = 'SimpleEmptyAnswer';
type SimpleHubSubscription = 'SimpleAnswer';
type TwoContractsHubSubscription = 'TwoContractsAnswer1' | 'TwoContractsAnswer2';

const connections: RConnections = {
    AttributeDeclaration: {},
  OnConnectionHub: {},
  OnConnectionManager: {},
  SimpleContextHub: {},
  SimpleEmptyHub: {},
  SimpleHub: {},
  TwoContractsHub: {},
};

export const uiRtcSubscription = {
    AttributeDeclaration: {
    AttributeDeclarationAttributeAnswer: (callBack: (data: AttributeDeclarationResponseMessage) => void) => subscribe("AttributeDeclaration", "AttributeDeclarationAttributeAnswer", callBack),
  },
  OnConnectionHub: {
    DummyMethod: (callBack: () => void) => subscribe("OnConnectionHub", "DummyMethod", callBack),
  },
  OnConnectionManager: {
    UpdateStatus: (callBack: (data: OnConnectionStatusModel) => void) => subscribe("OnConnectionManager", "UpdateStatus", callBack),
  },
  SimpleContextHub: {
    SimpleContextAnswer: (callBack: (data: SimpleContexResponseMessage) => void) => subscribe("SimpleContextHub", "SimpleContextAnswer", callBack),
  },
  SimpleEmptyHub: {
    SimpleEmptyAnswer: (callBack: () => void) => subscribe("SimpleEmptyHub", "SimpleEmptyAnswer", callBack),
  },
  SimpleHub: {
    SimpleAnswer: (callBack: (data: SimpleResponseMessage) => void) => subscribe("SimpleHub", "SimpleAnswer", callBack),
  },
  TwoContractsHub: {
    TwoContractsAnswer1: (callBack: (data: TwoContractsResponseMessage) => void) => subscribe("TwoContractsHub", "TwoContractsAnswer1", callBack),
    TwoContractsAnswer2: (callBack: (data: TwoContractsResponseMessage) => void) => subscribe("TwoContractsHub", "TwoContractsAnswer2", callBack),
  },

};

export const uiRtcCommunication = {
    AttributeDeclaration: {
    AttributeDeclarationAttributeHandler: (request: AttributeDeclarationRequestMessage) => send("AttributeDeclaration", "AttributeDeclarationAttributeHandler", request),
  },
  SimpleContextHub: {
    SimpleContextHandler: (request: SimpleContexRequestMessage) => send("SimpleContextHub", "SimpleContextHandler", request),
  },
  SimpleEmptyHub: {
    SimpleEmptyHandler: () => send("SimpleEmptyHub", "SimpleEmptyHandler"),
  },
  SimpleHub: {
    SimpleHandler: (request: SimpleRequestMessage) => send("SimpleHub", "SimpleHandler", request),
  },
  TwoContractsHub: {
    TwoContracts: (request: TwoContractsRequestMessage) => send("TwoContractsHub", "TwoContracts", request),
  },

};

/* THIS (.ts) FILE IS GENERATED BY Tapper */
/* eslint-disable */
/* tslint:disable */

/** Transpiled from BE01.IntegrationTest.Scenarios.AttributeDeclaration.AttributeDeclarationRequestMessage */
export type AttributeDeclarationRequestMessage = {
    /** Transpiled from string */
    correlationId: string;
}

/** Transpiled from BE01.IntegrationTest.Scenarios.AttributeDeclaration.AttributeDeclarationResponseMessage */
export type AttributeDeclarationResponseMessage = {
    /** Transpiled from string */
    correlationId: string;
}



/* THIS (.ts) FILE IS GENERATED BY Tapper */
/* eslint-disable */
/* tslint:disable */

/** Transpiled from BE01.IntegrationTest.Scenarios.OnConnection.OnConnectionStatusModel */
export type OnConnectionStatusModel = {
    /** Transpiled from bool */
    isConnected: boolean;
}



/* THIS (.ts) FILE IS GENERATED BY Tapper */
/* eslint-disable */
/* tslint:disable */

/** Transpiled from BE01.IntegrationTest.Scenarios.SimpleContext.SimpleContexRequestMessage */
export type SimpleContexRequestMessage = {
    /** Transpiled from string */
    correlationId: string;
}

/** Transpiled from BE01.IntegrationTest.Scenarios.SimpleContext.SimpleContexResponseMessage */
export type SimpleContexResponseMessage = {
    /** Transpiled from string */
    correlationId: string;
    /** Transpiled from string */
    connectionId: string;
}



/* THIS (.ts) FILE IS GENERATED BY Tapper */
/* eslint-disable */
/* tslint:disable */

/** Transpiled from BE01.IntegrationTest.Scenarios.Simple.SimpleRequestMessage */
export type SimpleRequestMessage = {
    /** Transpiled from string */
    correlationId: string;
}

/** Transpiled from BE01.IntegrationTest.Scenarios.Simple.SimpleResponseMessage */
export type SimpleResponseMessage = {
    /** Transpiled from string */
    correlationId: string;
}



/* THIS (.ts) FILE IS GENERATED BY Tapper */
/* eslint-disable */
/* tslint:disable */

/** Transpiled from BE01.IntegrationTest.Scenarios.TwoHubsTwoContracts.TwoContractsRequestMessage */
export type TwoContractsRequestMessage = {
    /** Transpiled from string */
    correlationId: string;
}

/** Transpiled from BE01.IntegrationTest.Scenarios.TwoHubsTwoContracts.TwoContractsResponseMessage */
export type TwoContractsResponseMessage = {
    /** Transpiled from string */
    correlationId: string;
}



/* Hard code */
export interface IUiRtcConfiguration {
    serverUrl: string;
    activeHubs: uiRtcHubs[] | "All";
}

interface IHub {
    connection?: HubConnection;
    config?: IUiRtcConfiguration;
}

type RConnections = Record<uiRtcHubs, IHub>;

export const uiRtc = {
    initAsync: async (config: IUiRtcConfiguration) => {
        const hubsToInitialize =
            config.activeHubs === "All" ? allHubs : config.activeHubs;
        await Promise.all(hubsToInitialize.map((hub) => initHubAsync(config, hub)));
    },
    disposeAsync: async (hubs: uiRtcHubs[] | "All" | undefined) => {
        const hubsToInitialize =
            hubs === "All" || hubs === undefined ? allHubs : hubs;
        await Promise.all(hubsToInitialize.map((hub) => disposeHubAsync(hub)));
    },
};

const initHubAsync = async (
    config: IUiRtcConfiguration,
    hubName: uiRtcHubs
) => {
    if (!!connections[hubName].connection) {
        console.warn(hubName + " hub has been initialized already");
        return;
    }

    connections[hubName].config = config;

    try {
        connections[hubName].connection = buildConnection(
            config.serverUrl + hubName
        );
        await connections[hubName].connection.start();
    } catch (err) {
        console.error(
            "Error while establishing connection '" + hubName + "': ",
            err
        );
    }
};

const buildConnection = (url: string) => {
    let builder = new HubConnectionBuilder();
    builder.withUrl(url);
    builder.withAutomaticReconnect();

    return builder.build();
};

const disposeHubAsync = async (hubName: uiRtcHubs) => {
    if (isConnected(hubName)) {
        try {
            await connections[hubName].connection!.stop();
            connections[hubName] = {};
        } catch (err) {
            console.error(
                "Error while establishing connection '" + hubName + "': ",
                err
            );
        }
    } else {
        console.warn(hubName + " hub has not been initialized");
    }
};

const isConnected = (hubName: uiRtcHubs) => {
    if (
        !!connections &&
        !!connections[hubName] &&
        !!connections[hubName].connection &&
        (connections[hubName].connection.state === HubConnectionState.Connected ||
            connections[hubName].connection.state === HubConnectionState.Connecting ||
            connections[hubName].connection.state === HubConnectionState.Reconnecting)
    )
        return true;
    return false;
};

const subscribe = (
    hub: uiRtcHubs,
    sub: hubSubscriptions,
    callBack: (data: any) => void
) => {
    connections[hub].connection?.on(sub, callBack);
};

const send = (hub: uiRtcHubs, method: hubMethods, request?: any) => {
    if (!!request) {
        connections[hub].connection?.send(method, request);
    } else {
        connections[hub].connection?.send(method);
    }
};