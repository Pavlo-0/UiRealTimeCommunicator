trigger:
  branches:
    include:
      - main

pool:
  name: "Default"

variables:
  projectName: "UiRtc"
  projectUnitTestName: "UiRtc.UnitTests"
  packageName: "UiRealTimeCommunicator-develop"

  projectGeneratorName: "UiRtc.TypeScriptGenerator"
  projectGeneratorUnitTestName: "UiRtc.TypeScriptGenerator.UnitTests"
  packageGeneratorName: "UiRealTimeCommunicator.TypeScriptGenerator-develop"

  solutionName: "UiRealTimeCommunicator.UiRtc" # Updated solution name
  generatorSolutionName: "UiRealTimeCommunicator.UiRtc.TypeScriptGenerator" # Added generator solution name
  buildConfiguration: "Release"
  nugetSource: "https://api.nuget.org/v3/index.json" # NuGet.org Feed
  #nugetApiKey: $(NuGetApiKey)  # Ensure this secret is defined in Azure DevOps
  majorVersion: "1"
  minorVersion: "0"
  patchVersion: $(Build.BuildNumber) # Use the build number as the patch version
  packageVersion: $(majorVersion).$(minorVersion).$(patchVersion)
  prPackageVersion: "$(majorVersion).$(minorVersion).$(Build.BuildId)-pr"
  readmePath: "README.md" # Path to README.md (you can adjust this if it's located elsewhere)

jobs:
  - job: BuildAndPublish
    displayName: "Build, Test, and Publish"
    pool:
      name: "Default"

    steps:
      # Step 1: Use .NET Core SDK
      - task: UseDotNet@2
        inputs:
          packageType: "sdk"
          version: "8.x"
          installationPath: $(Agent.ToolsDirectory)/dotnet

      # Step 2: Install NuGet Tool
      - task: NuGetToolInstaller@1

      # Step 3: Restore Dependencies
      - script: dotnet restore $(solutionName).sln
        displayName: "Restore NuGet Packages for UiRtc"

      # Step 4: Determine Package Version
      - powershell: |
          if ("$(Build.Reason)" -eq "PullRequest") {
              Write-Output "##vso[task.setvariable variable=packageVersion]$(prPackageVersion)"
          }
        displayName: "Set Version for PR Build"

      # Step 5: Copy README.md to the Artifact Staging Directory
      - powershell: |
          Copy-Item "$(Build.SourcesDirectory)\$(readmePath)" "$(projectName)\$(readmePath)"
        displayName: "Copy README.md to Solution UiRtc"

      # Step 6: Build the Projects
      - script: dotnet build $(solutionName).sln --configuration $(buildConfiguration) --no-restore
        displayName: "Build UiRtc Project"

      # Step 7: Run Unit Tests (Optional)
      - script: dotnet test $(projectUnitTestName)/$(projectUnitTestName).csproj --configuration $(buildConfiguration) --no-build --logger trx
        displayName: "Run Unit Tests UiRtc"

      # Step 8: Pack the NuGet Packages
      - script: dotnet pack $(projectName)/$(projectName).csproj --configuration $(buildConfiguration) --no-build --no-restore -o $(Build.ArtifactStagingDirectory) /p:PackageId=$(packageName) /p:PackageVersion=$(packageVersion) /p:IncludeReferencedProjects=true
        displayName: "Create NuGet Package UiRtc"

      # Step 3: Restore Dependencies
      - script: dotnet restore $(generatorSolutionName).sln
        displayName: "Restore NuGet Packages for UiRtc.TypeScriptGenerator"

      # Step 5: Copy README.md to the Artifact Staging Directory

      - powershell: |
          Copy-Item "$(Build.SourcesDirectory)\$(readmePath)" "$(projectGeneratorName)\$(readmePath)"
        displayName: "Copy README.md to Solution UiRtc.TypeScriptGenerator"

      # Step 6: Build the Projects
      - script: dotnet build $(generatorSolutionName).sln --configuration $(buildConfiguration) --no-restore
        displayName: "Build UiRtc.TypeScriptGenerator Project"

      # Step 7: Run Unit Tests (Optional)
      - script: dotnet test $(projectGeneratorUnitTestName)/$(projectGeneratorUnitTestName).csproj --configuration $(buildConfiguration) --no-build --logger trx
        displayName: "Run Unit Tests for UiRtc.TypeScriptGenerator"

      # Step 8: Pack the NuGet Packages
      - script: dotnet pack $(projectGeneratorName)/$(projectGeneratorName).csproj --configuration $(buildConfiguration) --no-build -o $(Build.ArtifactStagingDirectory) /p:PackageId=$(packageGeneratorName) /p:PackageVersion=$(packageVersion)
        displayName: "Create NuGet Package for UiRtc.TypeScriptGenerator"

      # Step 9: Push NuGet Packages
      - script: dotnet nuget push $(Build.ArtifactStagingDirectory)\*.nupkg --api-key $(NuGetApiKey3) --source https://api.nuget.org/v3/index.json
        displayName: "Push NuGet Package"
